<?php


namespace Iugu\Traits;


use Exception;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\GuzzleException;

trait IuguBaseTrait
{
    use GuzzleRequestTrait;

    public function sync(array $options = [])
    {
        try{
            $this->saveRequest();
            return parent::save($options); // TODO: Change the autogenerated stub
        } catch (ClientException | Exception $exception) {
            throw $exception;
        }
    }

    public function syncOrFail(array $options=[])
    {
        try{
            $this->saveRequest();
            return parent::saveOrFail($options); // TODO: Change the autogenerated stub
        } catch (ClientException | Exception $exception) {
            throw $exception;
        }
    }

    public function syncDelete()
    {
        try{
            $this->deleteRequest();
            return parent::delete(); // TODO: Change the autogenerated stub
        } catch (ClientException | Exception $exception) {
            throw $exception;
        }
    }

    /**
     * @return mixed
     * @throws GuzzleException
     */
    public function saveRequest()
    {
        try{
            $customer = null;
            if(empty($this->iugu_id))
            {
                $customer=$this->postRequest();
                $this->iugu_id = $customer->id;
            } else {
                $customer=$this->updateRequest();
            }
            $collect=collect($customer)->toArray();
            $this->fill($collect);
            $this->saveOrFail();
            return $customer;
        } catch (ClientException $exception) {
            throw $exception;
        }
    }

    /**
     * @param array $optionalHeaders
     * @return mixed
     */
    public function postRequest($optionalHeaders = [])
    {
        $data = collect($this->toArray())->except(['id','iugu_id'])->toJson();
        return $this->decodeResponse($this->createRequest()->post($this->getBasePath(), [
            'json' => $this->toArray()
        ]));
    }

    public function updateRequest()
    {
        $data= collect([$this->toArray()])
            ->except(['id',"iugu_id",'deleted_at','created_at','updated_at','customer_id','custom_variables']);
        return $this->decodeResponse($this->createRequest()->put($this->getBasePath(), [
            'json' => $data->toJson()
        ]));
    }

    public function deleteRequest()
    {
        return $this->decodeResponse($this->createRequest()->delete($this->getBasePath()));
    }

    public function getIuguDataAttribute()
    {
        return $this->decodeResponse($this->createRequest()->get($this->getBasePath()));
    }
}
